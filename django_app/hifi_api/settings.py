from datetime import timedelta

"""
Django settings for hifi_api project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'h4&gj61@5b$8@#l-k$l1rapc7851#n&!!++5m@_^n10h59s4=1'

ALLOWED_HOSTS = ['*']
SESSION_COOKIE_AGE = 100000
# Application definition

INSTALLED_APPS = [
    'storages',
    'pokemongo.apps.PokemongoConfig',
    'utils.apps.UtilsConfig',
    'hf.apps.HfConfig',
    'django.contrib.gis',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'hf.log_midware.LoggingMiddleware'
]

ROOT_URLCONF = 'hifi_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hifi_api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

try:
    f = open(BASE_DIR + '/hifi_api/config.cfg', 'r')
    environ = f.readline().strip()
except:
    environ = 'TEST'

if environ == 'LOCAL':
    DEBUG = True
    AWS_STORAGE_BUCKET_NAME = 'hifitestbkt'
    APNS_IOS_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/APNS_SANDBOX/HifiSandbox'
    GCM_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/GCM/hifi'
    FILES_PREFIX = 'https://hifiprodbkt.s3.amazonaws.com'
    BROKER_URL = "amqp://ansh:ansh@localhost:5672/myvhost"
    STATIC_URL = '/static/'
    BASE_URL = 'http://127.0.0.1:8000'
    TIME_ZONE = 'UTC'
    EMAIL_FILE_PATH = BASE_DIR + '/attachments'
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    # EMAIL_BACKEND = 'django_ses.SESBackend'
    LOCAL = True
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.mysql',
            'NAME': 'hifi',
            'USER': 'root',
            'PASSWORD': "'",
            'OPTIONS': {'charset': 'utf8mb4', 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"},
            'CONN_MAX_AGE': 6,
        }
    }
elif environ == 'TEST':
    DEBUG = True
    AWS_STORAGE_BUCKET_NAME = 'hifitestbkt'
    # APNS_IOS_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/APNS_SANDBOX/HifiSandbox'
    APNS_IOS_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/APNS/Hifi'
    GCM_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/GCM/hifi'
    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    FILES_PREFIX = 'https://%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
    BASE_URL = 'http://54.87.134.135'
    TIME_ZONE = 'UTC'
    EMAIL_BACKEND = 'django_ses.SESBackend'
    TEST = True
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.mysql',
            'NAME': 'hifitestdb',
            'USER': 'highfive',
            'PASSWORD': "India123",
            'HOST': 'hifidbinstance.cvc882wdgyyf.us-east-1.rds.amazonaws.com',
            'PORT': '',
            'OPTIONS': {'charset': 'utf8mb4', 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"},
            'CONN_MAX_AGE': 5,
        }
    }
elif environ == 'PRODUCTION':
    DEBUG = False
    AWS_STORAGE_BUCKET_NAME = 'hifiprodbkt'
    # APNS_IOS_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/APNS/Hifi'
    APNS_IOS_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/APNS/Hifi'
    GCM_APP_ARN = 'arn:aws:sns:us-east-1:560336212041:app/GCM/Hifi'
    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    FILES_PREFIX = 'https://%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
    BASE_URL = 'https://api.hifi.re'
    TIME_ZONE = 'UTC'
    EMAIL_BACKEND = 'django_ses.SESBackend'
    PRODUCTION = True
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.mysql',
            'NAME': 'hifiproddb',
            'USER': 'highfive',
            'PASSWORD': "India123",
            'HOST': 'hifidbinstance.cvc882wdgyyf.us-east-1.rds.amazonaws.com',
            'PORT': '',
            'OPTIONS': {'charset': 'utf8mb4', 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"},
            'CONN_MAX_AGE': 5,
        }
    }

AWS_ACCESS_KEY_ID = 'AKIAIJJR5OLZSSSTJXZA'
AWS_SECRET_ACCESS_KEY = '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'

if 'test' in sys.argv or 'test_coverage' in sys.argv:  # Covers regular testing and django-coverage
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
LOCATION_TOPIC_ARN = 'arn:aws:sns:us-east-1:560336212041:location_update'
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "_" * 150 + "\n\n" + "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s" + '\n',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR + '/hifi.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'ERROR',
        },
        'hf': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
        'utils': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
        'django.server': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },

    }
}
if environ == 'LOCAL':
    dictionary = {'django.db.backends': {
        'handlers': ['file'],
        'level': 'DEBUG',
    }}
    LOGGING['loggers'].update(dictionary)

CELERY_APP = 'hifi'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERYBEAT_SCHEDULE = {
    'location_notification_60_seconds': {
        'task': 'utils.tasks.test_task',
        # 'task': 'utils.tasks.location_notification',
        'schedule': timedelta(seconds=60),
    },
}

PROXIMITY = 175
